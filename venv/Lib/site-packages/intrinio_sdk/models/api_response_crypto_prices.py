# coding: utf-8

"""
    Intrinio API

    Welcome to the Intrinio API! Through our Financial Data Marketplace, we offer a wide selection of financial data feed APIs sourced by our own proprietary processes as well as from many data vendors. For a complete API request / response reference please view the [Intrinio API documentation](https://intrinio.com/documentation/api_v2). If you need additional help in using the API, please visit the [Intrinio website](https://intrinio.com) and click on the chat icon in the lower right corner.  # noqa: E501

    OpenAPI spec version: 2.5.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from intrinio_sdk.models.crypto_exchange_summary import CryptoExchangeSummary  # noqa: F401,E501
from intrinio_sdk.models.crypto_pair_summary import CryptoPairSummary  # noqa: F401,E501
from intrinio_sdk.models.crypto_price import CryptoPrice  # noqa: F401,E501


class ApiResponseCryptoPrices(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'prices': 'list[CryptoPrice]',
        'pair': 'CryptoPairSummary',
        'exchange': 'CryptoExchangeSummary',
        'timeframe': 'str',
        'next_page': 'str'
    }

    attribute_map = {
        'prices': 'prices',
        'pair': 'pair',
        'exchange': 'exchange',
        'timeframe': 'timeframe',
        'next_page': 'next_page'
    }

    def __init__(self, prices=None, pair=None, exchange=None, timeframe=None, next_page=None):  # noqa: E501
        """ApiResponseCryptoPrices - a model defined in Swagger"""  # noqa: E501

        self._prices = None
        self._pair = None
        self._exchange = None
        self._timeframe = None
        self._next_page = None
        self.discriminator = None

        if prices is not None:
            self.prices = prices
        if pair is not None:
            self.pair = pair
        if exchange is not None:
            self.exchange = exchange
        if timeframe is not None:
            self.timeframe = timeframe
        if next_page is not None:
            self.next_page = next_page

    @property
    def prices(self):
        """Gets the prices of this ApiResponseCryptoPrices.  # noqa: E501

        All the BAR prices, time, and volume.  # noqa: E501

        :return: The prices of this ApiResponseCryptoPrices.  # noqa: E501
        :rtype: list[CryptoPrice]
        """
        return self._prices

    @prices.setter
    def prices(self, prices):
        """Sets the prices of this ApiResponseCryptoPrices.

        All the BAR prices, time, and volume.  # noqa: E501

        :param prices: The prices of this ApiResponseCryptoPrices.  # noqa: E501
        :type: list[CryptoPrice]
        """

        self._prices = prices

    @property
    def pair(self):
        """Gets the pair of this ApiResponseCryptoPrices.  # noqa: E501


        :return: The pair of this ApiResponseCryptoPrices.  # noqa: E501
        :rtype: CryptoPairSummary
        """
        return self._pair

    @pair.setter
    def pair(self, pair):
        """Sets the pair of this ApiResponseCryptoPrices.


        :param pair: The pair of this ApiResponseCryptoPrices.  # noqa: E501
        :type: CryptoPairSummary
        """

        self._pair = pair

    @property
    def exchange(self):
        """Gets the exchange of this ApiResponseCryptoPrices.  # noqa: E501


        :return: The exchange of this ApiResponseCryptoPrices.  # noqa: E501
        :rtype: CryptoExchangeSummary
        """
        return self._exchange

    @exchange.setter
    def exchange(self, exchange):
        """Sets the exchange of this ApiResponseCryptoPrices.


        :param exchange: The exchange of this ApiResponseCryptoPrices.  # noqa: E501
        :type: CryptoExchangeSummary
        """

        self._exchange = exchange

    @property
    def timeframe(self):
        """Gets the timeframe of this ApiResponseCryptoPrices.  # noqa: E501

        The time interval for the crypto currency prices.  # noqa: E501

        :return: The timeframe of this ApiResponseCryptoPrices.  # noqa: E501
        :rtype: str
        """
        return self._timeframe

    @timeframe.setter
    def timeframe(self, timeframe):
        """Sets the timeframe of this ApiResponseCryptoPrices.

        The time interval for the crypto currency prices.  # noqa: E501

        :param timeframe: The timeframe of this ApiResponseCryptoPrices.  # noqa: E501
        :type: str
        """

        self._timeframe = timeframe

    @property
    def next_page(self):
        """Gets the next_page of this ApiResponseCryptoPrices.  # noqa: E501

        The token required to request the next page of the data  # noqa: E501

        :return: The next_page of this ApiResponseCryptoPrices.  # noqa: E501
        :rtype: str
        """
        return self._next_page

    @next_page.setter
    def next_page(self, next_page):
        """Sets the next_page of this ApiResponseCryptoPrices.

        The token required to request the next page of the data  # noqa: E501

        :param next_page: The next_page of this ApiResponseCryptoPrices.  # noqa: E501
        :type: str
        """

        self._next_page = next_page

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiResponseCryptoPrices):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
