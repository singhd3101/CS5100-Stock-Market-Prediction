# coding: utf-8

"""
    Intrinio API

    Welcome to the Intrinio API! Through our Financial Data Marketplace, we offer a wide selection of financial data feed APIs sourced by our own proprietary processes as well as from many data vendors. For a complete API request / response reference please view the [Intrinio API documentation](https://intrinio.com/documentation/api_v2). If you need additional help in using the API, please visit the [Intrinio website](https://intrinio.com) and click on the chat icon in the lower right corner.  # noqa: E501

    OpenAPI spec version: 2.5.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CryptoSnapshot(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'last_updated': 'str',
        'bid': 'float',
        'bid_size': 'float',
        'ask': 'float',
        'ask_size': 'float',
        'change': 'float',
        'change_percent': 'float',
        'volume': 'float',
        'open': 'float',
        'high': 'float',
        'low': 'float',
        'last_trade_side': 'str',
        'last_trade_time': 'str',
        'last_trade_price': 'float',
        'last_trade_size': 'float'
    }

    attribute_map = {
        'last_updated': 'last_updated',
        'bid': 'bid',
        'bid_size': 'bid_size',
        'ask': 'ask',
        'ask_size': 'ask_size',
        'change': 'change',
        'change_percent': 'change_percent',
        'volume': 'volume',
        'open': 'open',
        'high': 'high',
        'low': 'low',
        'last_trade_side': 'last_trade_side',
        'last_trade_time': 'last_trade_time',
        'last_trade_price': 'last_trade_price',
        'last_trade_size': 'last_trade_size'
    }

    def __init__(self, last_updated=None, bid=None, bid_size=None, ask=None, ask_size=None, change=None, change_percent=None, volume=None, open=None, high=None, low=None, last_trade_side=None, last_trade_time=None, last_trade_price=None, last_trade_size=None):  # noqa: E501
        """CryptoSnapshot - a model defined in Swagger"""  # noqa: E501

        self._last_updated = None
        self._bid = None
        self._bid_size = None
        self._ask = None
        self._ask_size = None
        self._change = None
        self._change_percent = None
        self._volume = None
        self._open = None
        self._high = None
        self._low = None
        self._last_trade_side = None
        self._last_trade_time = None
        self._last_trade_price = None
        self._last_trade_size = None
        self.discriminator = None

        if last_updated is not None:
            self.last_updated = last_updated
        if bid is not None:
            self.bid = bid
        if bid_size is not None:
            self.bid_size = bid_size
        if ask is not None:
            self.ask = ask
        if ask_size is not None:
            self.ask_size = ask_size
        if change is not None:
            self.change = change
        if change_percent is not None:
            self.change_percent = change_percent
        if volume is not None:
            self.volume = volume
        if open is not None:
            self.open = open
        if high is not None:
            self.high = high
        if low is not None:
            self.low = low
        if last_trade_side is not None:
            self.last_trade_side = last_trade_side
        if last_trade_time is not None:
            self.last_trade_time = last_trade_time
        if last_trade_price is not None:
            self.last_trade_price = last_trade_price
        if last_trade_size is not None:
            self.last_trade_size = last_trade_size

    @property
    def last_updated(self):
        """Gets the last_updated of this CryptoSnapshot.  # noqa: E501

        UTC timestamp of when the snapshot was last updated.  # noqa: E501

        :return: The last_updated of this CryptoSnapshot.  # noqa: E501
        :rtype: str
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this CryptoSnapshot.

        UTC timestamp of when the snapshot was last updated.  # noqa: E501

        :param last_updated: The last_updated of this CryptoSnapshot.  # noqa: E501
        :type: str
        """

        self._last_updated = last_updated

    @property
    def bid(self):
        """Gets the bid of this CryptoSnapshot.  # noqa: E501

        The bid for the Crypto Currency Pair on the exchange.  # noqa: E501

        :return: The bid of this CryptoSnapshot.  # noqa: E501
        :rtype: float
        """
        return self._bid

    @bid.setter
    def bid(self, bid):
        """Sets the bid of this CryptoSnapshot.

        The bid for the Crypto Currency Pair on the exchange.  # noqa: E501

        :param bid: The bid of this CryptoSnapshot.  # noqa: E501
        :type: float
        """

        self._bid = bid

    @property
    def bid_size(self):
        """Gets the bid_size of this CryptoSnapshot.  # noqa: E501

        The size of the bid for the Crypto Currency Pair on the exchange.  # noqa: E501

        :return: The bid_size of this CryptoSnapshot.  # noqa: E501
        :rtype: float
        """
        return self._bid_size

    @bid_size.setter
    def bid_size(self, bid_size):
        """Sets the bid_size of this CryptoSnapshot.

        The size of the bid for the Crypto Currency Pair on the exchange.  # noqa: E501

        :param bid_size: The bid_size of this CryptoSnapshot.  # noqa: E501
        :type: float
        """

        self._bid_size = bid_size

    @property
    def ask(self):
        """Gets the ask of this CryptoSnapshot.  # noqa: E501

        The ask for the Crypto Currency Pair on the exchange.  # noqa: E501

        :return: The ask of this CryptoSnapshot.  # noqa: E501
        :rtype: float
        """
        return self._ask

    @ask.setter
    def ask(self, ask):
        """Sets the ask of this CryptoSnapshot.

        The ask for the Crypto Currency Pair on the exchange.  # noqa: E501

        :param ask: The ask of this CryptoSnapshot.  # noqa: E501
        :type: float
        """

        self._ask = ask

    @property
    def ask_size(self):
        """Gets the ask_size of this CryptoSnapshot.  # noqa: E501

        The size of the ask for the Crypto Currency Pair on the exchange.  # noqa: E501

        :return: The ask_size of this CryptoSnapshot.  # noqa: E501
        :rtype: float
        """
        return self._ask_size

    @ask_size.setter
    def ask_size(self, ask_size):
        """Sets the ask_size of this CryptoSnapshot.

        The size of the ask for the Crypto Currency Pair on the exchange.  # noqa: E501

        :param ask_size: The ask_size of this CryptoSnapshot.  # noqa: E501
        :type: float
        """

        self._ask_size = ask_size

    @property
    def change(self):
        """Gets the change of this CryptoSnapshot.  # noqa: E501

        The notional change in price over the last 24 hours.  # noqa: E501

        :return: The change of this CryptoSnapshot.  # noqa: E501
        :rtype: float
        """
        return self._change

    @change.setter
    def change(self, change):
        """Sets the change of this CryptoSnapshot.

        The notional change in price over the last 24 hours.  # noqa: E501

        :param change: The change of this CryptoSnapshot.  # noqa: E501
        :type: float
        """

        self._change = change

    @property
    def change_percent(self):
        """Gets the change_percent of this CryptoSnapshot.  # noqa: E501

        The percent change in price over the last 24 hours.  # noqa: E501

        :return: The change_percent of this CryptoSnapshot.  # noqa: E501
        :rtype: float
        """
        return self._change_percent

    @change_percent.setter
    def change_percent(self, change_percent):
        """Sets the change_percent of this CryptoSnapshot.

        The percent change in price over the last 24 hours.  # noqa: E501

        :param change_percent: The change_percent of this CryptoSnapshot.  # noqa: E501
        :type: float
        """

        self._change_percent = change_percent

    @property
    def volume(self):
        """Gets the volume of this CryptoSnapshot.  # noqa: E501

        The volume of the Crypto Currency Pair on the exchange.  # noqa: E501

        :return: The volume of this CryptoSnapshot.  # noqa: E501
        :rtype: float
        """
        return self._volume

    @volume.setter
    def volume(self, volume):
        """Sets the volume of this CryptoSnapshot.

        The volume of the Crypto Currency Pair on the exchange.  # noqa: E501

        :param volume: The volume of this CryptoSnapshot.  # noqa: E501
        :type: float
        """

        self._volume = volume

    @property
    def open(self):
        """Gets the open of this CryptoSnapshot.  # noqa: E501

        The opening price of the currency on the exchange.  # noqa: E501

        :return: The open of this CryptoSnapshot.  # noqa: E501
        :rtype: float
        """
        return self._open

    @open.setter
    def open(self, open):
        """Sets the open of this CryptoSnapshot.

        The opening price of the currency on the exchange.  # noqa: E501

        :param open: The open of this CryptoSnapshot.  # noqa: E501
        :type: float
        """

        self._open = open

    @property
    def high(self):
        """Gets the high of this CryptoSnapshot.  # noqa: E501

        The highest price of the currency on the exchange for the last 24 hours.  # noqa: E501

        :return: The high of this CryptoSnapshot.  # noqa: E501
        :rtype: float
        """
        return self._high

    @high.setter
    def high(self, high):
        """Sets the high of this CryptoSnapshot.

        The highest price of the currency on the exchange for the last 24 hours.  # noqa: E501

        :param high: The high of this CryptoSnapshot.  # noqa: E501
        :type: float
        """

        self._high = high

    @property
    def low(self):
        """Gets the low of this CryptoSnapshot.  # noqa: E501

        The lowest price of the currency on the exchange for the last 24 hours.  # noqa: E501

        :return: The low of this CryptoSnapshot.  # noqa: E501
        :rtype: float
        """
        return self._low

    @low.setter
    def low(self, low):
        """Sets the low of this CryptoSnapshot.

        The lowest price of the currency on the exchange for the last 24 hours.  # noqa: E501

        :param low: The low of this CryptoSnapshot.  # noqa: E501
        :type: float
        """

        self._low = low

    @property
    def last_trade_side(self):
        """Gets the last_trade_side of this CryptoSnapshot.  # noqa: E501

        The side of the last trade, either buy or sell.  # noqa: E501

        :return: The last_trade_side of this CryptoSnapshot.  # noqa: E501
        :rtype: str
        """
        return self._last_trade_side

    @last_trade_side.setter
    def last_trade_side(self, last_trade_side):
        """Sets the last_trade_side of this CryptoSnapshot.

        The side of the last trade, either buy or sell.  # noqa: E501

        :param last_trade_side: The last_trade_side of this CryptoSnapshot.  # noqa: E501
        :type: str
        """

        self._last_trade_side = last_trade_side

    @property
    def last_trade_time(self):
        """Gets the last_trade_time of this CryptoSnapshot.  # noqa: E501

        UTC timestamp of the last trade for the Crypto Currency Pair on the exchange.  # noqa: E501

        :return: The last_trade_time of this CryptoSnapshot.  # noqa: E501
        :rtype: str
        """
        return self._last_trade_time

    @last_trade_time.setter
    def last_trade_time(self, last_trade_time):
        """Sets the last_trade_time of this CryptoSnapshot.

        UTC timestamp of the last trade for the Crypto Currency Pair on the exchange.  # noqa: E501

        :param last_trade_time: The last_trade_time of this CryptoSnapshot.  # noqa: E501
        :type: str
        """

        self._last_trade_time = last_trade_time

    @property
    def last_trade_price(self):
        """Gets the last_trade_price of this CryptoSnapshot.  # noqa: E501

        The price of the last trade for the Crypto Currency Pair on the exchange.  # noqa: E501

        :return: The last_trade_price of this CryptoSnapshot.  # noqa: E501
        :rtype: float
        """
        return self._last_trade_price

    @last_trade_price.setter
    def last_trade_price(self, last_trade_price):
        """Sets the last_trade_price of this CryptoSnapshot.

        The price of the last trade for the Crypto Currency Pair on the exchange.  # noqa: E501

        :param last_trade_price: The last_trade_price of this CryptoSnapshot.  # noqa: E501
        :type: float
        """

        self._last_trade_price = last_trade_price

    @property
    def last_trade_size(self):
        """Gets the last_trade_size of this CryptoSnapshot.  # noqa: E501

        The size of the last trade for the Crypto Currency Pair on the exchange.  # noqa: E501

        :return: The last_trade_size of this CryptoSnapshot.  # noqa: E501
        :rtype: float
        """
        return self._last_trade_size

    @last_trade_size.setter
    def last_trade_size(self, last_trade_size):
        """Sets the last_trade_size of this CryptoSnapshot.

        The size of the last trade for the Crypto Currency Pair on the exchange.  # noqa: E501

        :param last_trade_size: The last_trade_size of this CryptoSnapshot.  # noqa: E501
        :type: float
        """

        self._last_trade_size = last_trade_size

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CryptoSnapshot):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
