# coding: utf-8

"""
    Intrinio API

    Welcome to the Intrinio API! Through our Financial Data Marketplace, we offer a wide selection of financial data feed APIs sourced by our own proprietary processes as well as from many data vendors. For a complete API request / response reference please view the [Intrinio API documentation](https://intrinio.com/documentation/api_v2). If you need additional help in using the API, please visit the [Intrinio website](https://intrinio.com) and click on the chat icon in the lower right corner.  # noqa: E501

    OpenAPI spec version: 2.5.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from intrinio_sdk.api_client import ApiClient


class CryptoApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_crypto_book_asks(self, **kwargs):  # noqa: E501
        """Crypto Book Asks  # noqa: E501

        Returns the entire ask order book for a given Crypto Currency Pair and Crypto Exchange.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_crypto_book_asks(_async=True)
        >>> result = thread.get()

        :param async bool
        :param str pair: Return the order book asks for the given Crypto Currency Pair.
        :param str exchange: Return the order book asks for a Crypto Currency on the given Crypto Exchange.
        :param str currency: Return the order book asks for the given Crypto Currency.
        :return: ApiResponseCryptoBookAsks
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_crypto_book_asks_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_crypto_book_asks_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_crypto_book_asks_with_http_info(self, **kwargs):  # noqa: E501
        """Crypto Book Asks  # noqa: E501

        Returns the entire ask order book for a given Crypto Currency Pair and Crypto Exchange.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_crypto_book_asks_with_http_info(_async=True)
        >>> result = thread.get()

        :param async bool
        :param str pair: Return the order book asks for the given Crypto Currency Pair.
        :param str exchange: Return the order book asks for a Crypto Currency on the given Crypto Exchange.
        :param str currency: Return the order book asks for the given Crypto Currency.
        :return: ApiResponseCryptoBookAsks
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pair', 'exchange', 'currency']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_crypto_book_asks" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'pair' in params:
            query_params.append(('pair', params['pair']))  # noqa: E501
        if 'exchange' in params:
            query_params.append(('exchange', params['exchange']))  # noqa: E501
        if 'currency' in params:
            query_params.append(('currency', params['currency']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/crypto/book/asks', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiResponseCryptoBookAsks',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_crypto_book_bids(self, **kwargs):  # noqa: E501
        """Crypto Book Bids  # noqa: E501

        Returns the entire bid order book for a given Crypto Currency Pair and Crypto Exchange.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_crypto_book_bids(_async=True)
        >>> result = thread.get()

        :param async bool
        :param str pair: Return the order book bids for the given Crypto Currency Pair.
        :param str exchange: Return the order book bids for a Crypto Currency on the given Crypto Exchange.
        :param str currency: Return the order book bids for the given Crypto Currency.
        :return: ApiResponseCryptoBookBids
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_crypto_book_bids_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_crypto_book_bids_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_crypto_book_bids_with_http_info(self, **kwargs):  # noqa: E501
        """Crypto Book Bids  # noqa: E501

        Returns the entire bid order book for a given Crypto Currency Pair and Crypto Exchange.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_crypto_book_bids_with_http_info(_async=True)
        >>> result = thread.get()

        :param async bool
        :param str pair: Return the order book bids for the given Crypto Currency Pair.
        :param str exchange: Return the order book bids for a Crypto Currency on the given Crypto Exchange.
        :param str currency: Return the order book bids for the given Crypto Currency.
        :return: ApiResponseCryptoBookBids
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pair', 'exchange', 'currency']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_crypto_book_bids" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'pair' in params:
            query_params.append(('pair', params['pair']))  # noqa: E501
        if 'exchange' in params:
            query_params.append(('exchange', params['exchange']))  # noqa: E501
        if 'currency' in params:
            query_params.append(('currency', params['currency']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/crypto/book/bids', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiResponseCryptoBookBids',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_crypto_book_summary(self, **kwargs):  # noqa: E501
        """Crypto Book Summary  # noqa: E501

        Returns the order book summary (bid/ask prices and size) for a given Crypto Currency Pair and Crypto Exchange.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_crypto_book_summary(_async=True)
        >>> result = thread.get()

        :param async bool
        :param int levels: The number of prices/levels to return on each side. For example, the max of 50 levels will return up to 50 bid prices and 50 ask prices.
        :param str pair: Return the order book summary for the given Crypto Currency Pair.
        :param str exchange: Return the order book summary for a Crypto Currency on the given Crypto Exchange.
        :param str currency: Return the order book summary for the given Crypto Currency.
        :return: ApiResponseCryptoBook
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_crypto_book_summary_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_crypto_book_summary_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_crypto_book_summary_with_http_info(self, **kwargs):  # noqa: E501
        """Crypto Book Summary  # noqa: E501

        Returns the order book summary (bid/ask prices and size) for a given Crypto Currency Pair and Crypto Exchange.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_crypto_book_summary_with_http_info(_async=True)
        >>> result = thread.get()

        :param async bool
        :param int levels: The number of prices/levels to return on each side. For example, the max of 50 levels will return up to 50 bid prices and 50 ask prices.
        :param str pair: Return the order book summary for the given Crypto Currency Pair.
        :param str exchange: Return the order book summary for a Crypto Currency on the given Crypto Exchange.
        :param str currency: Return the order book summary for the given Crypto Currency.
        :return: ApiResponseCryptoBook
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['levels', 'pair', 'exchange', 'currency']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_crypto_book_summary" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'levels' in params:
            query_params.append(('levels', params['levels']))  # noqa: E501
        if 'pair' in params:
            query_params.append(('pair', params['pair']))  # noqa: E501
        if 'exchange' in params:
            query_params.append(('exchange', params['exchange']))  # noqa: E501
        if 'currency' in params:
            query_params.append(('currency', params['currency']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/crypto/book', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiResponseCryptoBook',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_crypto_currencies(self, **kwargs):  # noqa: E501
        """Crypto Currencies  # noqa: E501

        Returns a list of Crypto Currencies for which prices are available.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_crypto_currencies(_async=True)
        >>> result = thread.get()

        :param async bool
        :param str exchange: Returns Crypto Currencies traded on the given Crypto Exchange.
        :return: ApiResponseCryptoCurrencies
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_crypto_currencies_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_crypto_currencies_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_crypto_currencies_with_http_info(self, **kwargs):  # noqa: E501
        """Crypto Currencies  # noqa: E501

        Returns a list of Crypto Currencies for which prices are available.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_crypto_currencies_with_http_info(_async=True)
        >>> result = thread.get()

        :param async bool
        :param str exchange: Returns Crypto Currencies traded on the given Crypto Exchange.
        :return: ApiResponseCryptoCurrencies
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['exchange']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_crypto_currencies" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'exchange' in params:
            query_params.append(('exchange', params['exchange']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/crypto/currencies', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiResponseCryptoCurrencies',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_crypto_exchanges(self, **kwargs):  # noqa: E501
        """Crypto Exchanges  # noqa: E501

        Returns a list of Crypto Exchanges for which prices are available.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_crypto_exchanges(_async=True)
        >>> result = thread.get()

        :param async bool
        :param str pair: Returns Crypto Currencies traded on the given Crypto Exchange.
        :return: ApiResponseCryptoExchanges
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_crypto_exchanges_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_crypto_exchanges_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_crypto_exchanges_with_http_info(self, **kwargs):  # noqa: E501
        """Crypto Exchanges  # noqa: E501

        Returns a list of Crypto Exchanges for which prices are available.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_crypto_exchanges_with_http_info(_async=True)
        >>> result = thread.get()

        :param async bool
        :param str pair: Returns Crypto Currencies traded on the given Crypto Exchange.
        :return: ApiResponseCryptoExchanges
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pair']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_crypto_exchanges" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'pair' in params:
            query_params.append(('pair', params['pair']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/crypto/exchanges', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiResponseCryptoExchanges',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_crypto_pairs(self, **kwargs):  # noqa: E501
        """Crypto Pairs  # noqa: E501

        Returns a list of Crypto Currency Pairs for which data is available.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_crypto_pairs(_async=True)
        >>> result = thread.get()

        :param async bool
        :param str exchange: Return pairs traded on the given Crypto Exchange.
        :param str currency: Return pairs with one side being the given Crypto Currency.
        :param int page_size: An integer greater than or equal to 1 for specifying the number of results on each page.
        :param str next_page: Gets the next page of data from a previous API call
        :return: ApiResponseCryptoPairs
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_crypto_pairs_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_crypto_pairs_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_crypto_pairs_with_http_info(self, **kwargs):  # noqa: E501
        """Crypto Pairs  # noqa: E501

        Returns a list of Crypto Currency Pairs for which data is available.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_crypto_pairs_with_http_info(_async=True)
        >>> result = thread.get()

        :param async bool
        :param str exchange: Return pairs traded on the given Crypto Exchange.
        :param str currency: Return pairs with one side being the given Crypto Currency.
        :param int page_size: An integer greater than or equal to 1 for specifying the number of results on each page.
        :param str next_page: Gets the next page of data from a previous API call
        :return: ApiResponseCryptoPairs
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['exchange', 'currency', 'page_size', 'next_page']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_crypto_pairs" % key
                )
            params[key] = val
        del params['kwargs']

        if 'page_size' in params and params['page_size'] > 10000:  # noqa: E501
            raise ValueError("Invalid value for parameter `page_size` when calling `get_crypto_pairs`, must be a value less than or equal to `10000`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'exchange' in params:
            query_params.append(('exchange', params['exchange']))  # noqa: E501
        if 'currency' in params:
            query_params.append(('currency', params['currency']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'next_page' in params:
            query_params.append(('next_page', params['next_page']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/crypto/pairs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiResponseCryptoPairs',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_crypto_prices(self, timeframe, **kwargs):  # noqa: E501
        """Crypto Prices  # noqa: E501

        Returns a list of available Crypto Currency Prices.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_crypto_prices(timeframe, _async=True)
        >>> result = thread.get()

        :param async bool
        :param str timeframe: The time interval for the prices. (required)
        :param str pair: Return prices for the given Crypto Currency Pair.
        :param str exchange: Return prices for a Crypto Currency on the given Crypto Exchange.
        :param str currency: Return prices for the given Crypto Currency.
        :param str timezone: Return price date/times in this timezone, also interpret start/end date/time parameters in this timezone.
        :param str start_date: Return Crypto Prices on or after this date.
        :param str start_time: Return Crypto Prices at or after this time (24-hour).
        :param str end_date: Return Crypto Prices on or before this date.
        :param str end_time: Return Crypto Prices at or before this time (24-hour).
        :param int page_size: An integer greater than or equal to 1 for specifying the number of results on each page.
        :param str next_page: Gets the next page of data from a previous API call
        :return: ApiResponseCryptoPrices
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_crypto_prices_with_http_info(timeframe, **kwargs)  # noqa: E501
        else:
            (data) = self.get_crypto_prices_with_http_info(timeframe, **kwargs)  # noqa: E501
            return data

    def get_crypto_prices_with_http_info(self, timeframe, **kwargs):  # noqa: E501
        """Crypto Prices  # noqa: E501

        Returns a list of available Crypto Currency Prices.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_crypto_prices_with_http_info(timeframe, _async=True)
        >>> result = thread.get()

        :param async bool
        :param str timeframe: The time interval for the prices. (required)
        :param str pair: Return prices for the given Crypto Currency Pair.
        :param str exchange: Return prices for a Crypto Currency on the given Crypto Exchange.
        :param str currency: Return prices for the given Crypto Currency.
        :param str timezone: Return price date/times in this timezone, also interpret start/end date/time parameters in this timezone.
        :param str start_date: Return Crypto Prices on or after this date.
        :param str start_time: Return Crypto Prices at or after this time (24-hour).
        :param str end_date: Return Crypto Prices on or before this date.
        :param str end_time: Return Crypto Prices at or before this time (24-hour).
        :param int page_size: An integer greater than or equal to 1 for specifying the number of results on each page.
        :param str next_page: Gets the next page of data from a previous API call
        :return: ApiResponseCryptoPrices
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['timeframe', 'pair', 'exchange', 'currency', 'timezone', 'start_date', 'start_time', 'end_date', 'end_time', 'page_size', 'next_page']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_crypto_prices" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'timeframe' is set
        if ('timeframe' not in params or
                params['timeframe'] is None):
            raise ValueError("Missing the required parameter `timeframe` when calling `get_crypto_prices`")  # noqa: E501

        if 'page_size' in params and params['page_size'] > 10000:  # noqa: E501
            raise ValueError("Invalid value for parameter `page_size` when calling `get_crypto_prices`, must be a value less than or equal to `10000`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'timeframe' in params:
            path_params['timeframe'] = params['timeframe']  # noqa: E501

        query_params = []
        if 'pair' in params:
            query_params.append(('pair', params['pair']))  # noqa: E501
        if 'exchange' in params:
            query_params.append(('exchange', params['exchange']))  # noqa: E501
        if 'currency' in params:
            query_params.append(('currency', params['currency']))  # noqa: E501
        if 'timezone' in params:
            query_params.append(('timezone', params['timezone']))  # noqa: E501
        if 'start_date' in params:
            query_params.append(('start_date', params['start_date']))  # noqa: E501
        if 'start_time' in params:
            query_params.append(('start_time', params['start_time']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('end_date', params['end_date']))  # noqa: E501
        if 'end_time' in params:
            query_params.append(('end_time', params['end_time']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'next_page' in params:
            query_params.append(('next_page', params['next_page']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/crypto/prices', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiResponseCryptoPrices',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_crypto_snapshot(self, **kwargs):  # noqa: E501
        """Crypto Snapshot  # noqa: E501

        Returns a market snapshot over that last 24 hours for the given currency pair and exchange.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_crypto_snapshot(_async=True)
        >>> result = thread.get()

        :param async bool
        :param str pair: Return the snapshot for the given Crypto Currency Pair.
        :param str exchange: Return the snapshot for a Crypto Currency on the given Crypto Exchange.
        :param str currency: Return the snapshot for the given Crypto Currency.
        :return: ApiResponseCryptoSnapshot
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_crypto_snapshot_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_crypto_snapshot_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_crypto_snapshot_with_http_info(self, **kwargs):  # noqa: E501
        """Crypto Snapshot  # noqa: E501

        Returns a market snapshot over that last 24 hours for the given currency pair and exchange.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_crypto_snapshot_with_http_info(_async=True)
        >>> result = thread.get()

        :param async bool
        :param str pair: Return the snapshot for the given Crypto Currency Pair.
        :param str exchange: Return the snapshot for a Crypto Currency on the given Crypto Exchange.
        :param str currency: Return the snapshot for the given Crypto Currency.
        :return: ApiResponseCryptoSnapshot
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pair', 'exchange', 'currency']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_crypto_snapshot" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'pair' in params:
            query_params.append(('pair', params['pair']))  # noqa: E501
        if 'exchange' in params:
            query_params.append(('exchange', params['exchange']))  # noqa: E501
        if 'currency' in params:
            query_params.append(('currency', params['currency']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/crypto/snapshot', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiResponseCryptoSnapshot',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_crypto_stats(self, **kwargs):  # noqa: E501
        """Crypto Stats  # noqa: E501

        Returns available stats on Crypto Currencies.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_crypto_stats(_async=True)
        >>> result = thread.get()

        :param async bool
        :param str exchange: Returns stats for Crypto Currencies that trade on the specified Crypto Exchange.
        :param str currency: Returns stats for the specified Crypto Currency.
        :return: ApiResponseCryptoStats
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_crypto_stats_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_crypto_stats_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_crypto_stats_with_http_info(self, **kwargs):  # noqa: E501
        """Crypto Stats  # noqa: E501

        Returns available stats on Crypto Currencies.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_crypto_stats_with_http_info(_async=True)
        >>> result = thread.get()

        :param async bool
        :param str exchange: Returns stats for Crypto Currencies that trade on the specified Crypto Exchange.
        :param str currency: Returns stats for the specified Crypto Currency.
        :return: ApiResponseCryptoStats
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['exchange', 'currency']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_crypto_stats" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'exchange' in params:
            query_params.append(('exchange', params['exchange']))  # noqa: E501
        if 'currency' in params:
            query_params.append(('currency', params['currency']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/crypto/stats', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiResponseCryptoStats',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
